name: TON Address Converter CI/CD

on:
  push:
    branches: [main, master]
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        exclude:
          - os: macos-latest
            python-version: '3.7'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest maturin

      - name: Build and install package
        run: |
          maturin develop
          
      - name: Run tests
        run: |
          pytest python/test_it.py -v

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    if: "!contains(github.ref, 'refs/tags/')"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        exclude:
          - os: macos-latest
            python-version: '3.7'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin[zig] twine
          
      - name: Build wheels
        run: maturin build --release
        
      - name: Build wheels for older linux versions
        if: matrix.os == 'ubuntu-latest'
        run: maturin build --release --compatibility --zig --auditwheel check
        
      - name: Build sdist
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: maturin sdist
        
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: target/wheels/*

  publish:
    needs: test
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        exclude:
          - os: macos-latest
            python-version: '3.7'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin[zig] twine
          
      - name: Build wheels
        run: maturin build --release
        
      - name: Build wheels for older linux versions
        if: matrix.os == 'ubuntu-latest'
        run: maturin build --release --compatibility --zig --auditwheel check
        
      - name: Build sdist
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        run: maturin sdist
        
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload target/wheels/*